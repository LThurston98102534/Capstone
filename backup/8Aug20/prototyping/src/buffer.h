#ifndef BUFFER_H
#define BUFFER_H

#include <sstream>
#include <iostream>
#include <string>

#include <thread>
#include <chrono>
#include <deque>
#include <mutex>
#include <random>
#include <condition_variable>

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "tf/transform_datatypes.h" //To use getYaw function from the quaternion of orientation

#include "sensor_msgs/LaserScan.h"
#include "sensor_msgs/image_encodings.h"
#include "nav_msgs/Odometry.h"


namespace enc = sensor_msgs::image_encodings;

const double default_refresh_rate = 0.1;



/*!
 * \brief The ROSDataBuffer class
 *
 * This class is designed to perform all communication with the ROS framework. Inside this class are all the callback functions run when data is published to the subscribed topics as well as a secondary thread, containing the functionality required to complete the FBE.
 *
 */
class ROSDataBuffer{

public:
    /*!
     * \brief ROSDataBuffer
     *
     * ROS Data Buffer Constructor. This constructor receives two parameters upon initialisation; the ROS node handle, initialised in the main loop and a FrontierExplorer object. These parameters are utilised to initialise all member variables of the class and set up the communication between the ROS network and the FrontierExplorer class.
     *
     * \param nh - ROS Node Handle created in main.cpp
     * \param frontier_explorer_passed - FrontierExplorer object used to determine frontiers, calculate goal pose and determine which frontiers are seen from the goal pose.
     */
    ROSDataBuffer(ros::NodeHandle nh, const std::shared_ptr<FrontierExplorer> &);


  /*! \brief ROSDataBuffer destructor.
   *
   *  Will tear down the object
   */
    ~ROSDataBuffer();


  /*! \brief Odometry Callback
   *
   * Callback function executed each time new data is received from the odom ROS topic. This function is used to track the current pose of the robot in global space and store the most recent pose in a member variable.
   *
   *  \param msg - nav_msgs::OdometryConstPtr type odometry message containing the most recent odometry data of the robot
   */
    void odomCallback(const nav_msgs::OdometryConstPtr& msg);

 /*! \brief LaserScan Callback
  *
  * Callback function executed each time new data is received from the base_scan_1 ROS topic. This function provides data from the on-board laser attached to the robot. However, in FBE, the information from the laser is not so important, this callback is used to set up the laser parameters which are stored in a member variable and passed to the FrontierExplorer object.
  *
  *  \param msg - sensor_msgs::LaserScanConstPtr type laser scan message containing the most recent laser data
  */
    void laserCallback(const sensor_msgs::LaserScanConstPtr& msg);


 /*! \brief Image Callback
   *
   * Callback function executed each time new data is received from the map_image_full ROS topic. This function updates the correct member variable to provide an up-to-date image of the current OGMap.
   *
   * \param msg - sensor_msgs::ImageConstPtr type image message containing the most recent OG Map
   */
    void imageCallback(const sensor_msgs::ImageConstPtr& msg);




   /*!
    * \brief publishImage
    *
    * This is a simple function used to publish the image generated by the FrontierExplorer to the correct topic. This function accepts a cv image and will publish it to the topic defined in the constructor.
    *
    * \param passed_image - cv image to be published (received from the FrontierExplorer and requestService functions)
    *
    */
   void publishImage(cv_bridge::CvImage &);


   /*!
    * \brief requestService
    *
    * Upon receipt of the goal pose calculated in the FrontierExplorer object, this function sends a request to the RequestGoal service with the details of the global goal pose.
    * As stated in the specification, upon receipt of a response from the service, this function then calls the publishImage function and passes a new blank image of the OGMap as received from the map_image/full topic.
    *
    * \param goal_pose_global - Goal pose calculated in FrontierExplorer object in the global reference frame.
    *
    * \sa publishImage()
    */
   void requestService(geometry_msgs::Pose);



   /*!
    * \brief exploreUnknown
    *
    * This function is executed in a separate thread parallel to the data acquistion from ROS topics. In doing so, it ensures that data can be continuously acquired from the ROS topics, however, it is only manipulated and utilised as regularly as it required (in this instance, every ten seconds).
    *
    * Upon start up of the program, this function waits for the laser parameters to be set in the laserCallback function. Upon doing so, a setter is called in the FrontierExplorer object to set the appropriate constant values utilised throughout the program.
    *
    * This function then regularly (every ten seconds as default) calls the generateGoalPose() function in the FrontierExplorer object and receives an updated image from this function containing all required components. Upon receipt of this image, this function publishes the image to the appropriate topic and queries the vector of vectors of the frontier cells grouped inside the FrontierExplorer class and stores this vector in a member variable.
    * Finally, this function sends a request to the RequestGoal service containing the Goal Pose calculated in the FrontierExplorer class.
    *
    *
    * \sa requestService(), publishImage()
    */
   void exploreUnknown();

public:
    ros::NodeHandle nh_;//!< ROS Node Handle to store access to the ros node

private:

    image_transport::ImageTransport it_;//!< ImageTransport variable used to set up the map_image/full topic and to allow communication of images with ROS.
    image_transport::Publisher image_pub_;//!< Publisher variable used to publish edited images to ROS to display frontiers, goal pose, etc.
    ros::Subscriber sub1_;//!< Subscriber variable set up in the constructor for subscribing to Odometry topic
    ros::Subscriber sub2_;//!< Subscriber variable set up in the constructor for subscribing to Laser Scan topic
    image_transport::Subscriber sub3_;//!< Subscriber variable set up in the constructor for subscribing to map_image/full topic
    cv_bridge::CvImagePtr cvPtr_;//!< CvImagePtr used in imageCallback to read the msg.
    ros::ServiceClient request_path_client_;//!< ROS Service Client used to request Goal Pose upon calculation

    cv::Mat image_;//!< Latest OGMap image read from the map_image/full topic
    std::mutex image_mutex_;//!< Mutex used to ensure safe access to the image_member variable

    geometry_msgs::Pose robot_pose_;//!< Latest pose of robot in global coordinate obtained from Odometry topic
    std::mutex pose_mutex_;//!< Mutex to ensure safe axxess to the robot_pose_ member variable

    LaserParameters robot_laser_;//!< used to store all laser parameters
    std::mutex laser_parameters_mutex_;//!< mutex used to lock access to the robot_laser_ member variable

    const std::shared_ptr<FrontierExplorer> explorer_;//!< FrontierExplorer shared pointer used to call appropriate function to calculate goal pose and frontiers


    double refresh_rate_;//!< refresh rate of the separate loop (default set to 0.1 Hz)


    bool configure_parameters_;//!< boolean variable used to indicate that the laser parameters have been set
    std::condition_variable cv_parameters_;//!< condition variable used to indicate that the laser parameters have been set

    double resolution_;//!< resolution of OGMap to real-world distance

    std::vector<std::vector<cv::Point>> frontier_cells_;//!< Vector of vectors of points containing the frontier cells
};


#endif // BUFFER_H
